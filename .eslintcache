[{"C:\\WorkSpace\\tvmaze\\src\\App.js":"1","C:\\WorkSpace\\tvmaze\\src\\index.js":"2","C:\\WorkSpace\\tvmaze\\src\\pages\\Details.js":"3","C:\\WorkSpace\\tvmaze\\src\\pages\\Home.js":"4","C:\\WorkSpace\\tvmaze\\src\\pages\\NotFound.js":"5","C:\\WorkSpace\\tvmaze\\src\\pages\\HomeStyle.js":"6","C:\\WorkSpace\\tvmaze\\src\\components\\API.js":"7","C:\\WorkSpace\\tvmaze\\src\\components\\carousel.js":"8","C:\\WorkSpace\\tvmaze\\src\\components\\showCard.js":"9","C:\\WorkSpace\\tvmaze\\src\\components\\layout.js":"10","C:\\WorkSpace\\tvmaze\\src\\pages\\searchList.js":"11"},{"size":2981,"mtime":1609051212969,"results":"12","hashOfConfig":"13"},{"size":322,"mtime":1608922990298,"results":"14","hashOfConfig":"13"},{"size":3203,"mtime":1608923806504,"results":"15","hashOfConfig":"13"},{"size":3903,"mtime":1608923795861,"results":"16","hashOfConfig":"13"},{"size":267,"mtime":1608745211870,"results":"17","hashOfConfig":"13"},{"size":2347,"mtime":1608900975816,"results":"18","hashOfConfig":"13"},{"size":276,"mtime":1608809430901,"results":"19","hashOfConfig":"13"},{"size":3074,"mtime":1608919116812,"results":"20","hashOfConfig":"13"},{"size":2572,"mtime":1609044568010,"results":"21","hashOfConfig":"13"},{"size":2897,"mtime":1609051314066,"results":"22","hashOfConfig":"13"},{"size":2247,"mtime":1609051677907,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1fhpoqz",{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\WorkSpace\\tvmaze\\src\\App.js",["51","52","53"],"C:\\WorkSpace\\tvmaze\\src\\index.js",["54","55"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",["56","57"],"C:\\WorkSpace\\tvmaze\\src\\pages\\Details.js",["58","59"],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport fetchData from \"../components/API\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport HomeStyle from \"./HomeStyle\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nconst useStyles = makeStyles((theme) => HomeStyle(theme, fade));\r\nconst Details = () => {\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n  const [showDetails, setShowdetails] = useState(null);\r\n  useEffect(() => {\r\n    fetchData(`http://api.tvmaze.com/shows/${id}?embed=episodes`, (result) => {\r\n      setShowdetails(result);\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {showDetails ? (\r\n        <div style={{ marginTop: \"10vh\" }}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={4}>\r\n              <img src={showDetails.image.medium} />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              <Typography variant=\"h6\" noWrap>\r\n                {showDetails.name}\r\n              </Typography>\r\n              <div\r\n                dangerouslySetInnerHTML={{\r\n                  __html: `${showDetails.summary}`,\r\n                }}\r\n              />\r\n              <Typography variant=\"body2\">\r\n                Genres: {showDetails.genres.join(\",\")}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Rating: {showDetails.rating.average}\r\n              </Typography>\r\n            </Grid>\r\n            {}\r\n          </Grid>\r\n\r\n          {showDetails._embedded.episodes.map((episode, index) => {\r\n            return (\r\n              <div key={index}>\r\n                <Paper className={classes.root}>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                      <img src={episode.image.medium} />\r\n                    </Grid>\r\n                    <Grid item xs={7}>\r\n                      <p></p>\r\n                      <Typography variant=\"h6\">{episode.name}</Typography>\r\n                      <Typography variant=\"caption\" display=\"block\">\r\n                        {`Season: ${episode.season} Episode: ${episode.number}`}\r\n                      </Typography>\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: `${episode.summary}`,\r\n                        }}\r\n                      />\r\n                      <Typography variant=\"caption\" display=\"block\">\r\n                        Runtime: {episode.runtime}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Paper>\r\n                <Divider />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <Skeleton variant=\"text\" />\r\n          <Skeleton variant=\"circle\" width={40} height={40} />\r\n          <Skeleton variant=\"rect\" height={550} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","C:\\WorkSpace\\tvmaze\\src\\pages\\Home.js",["60","61","62"],"import React, { useState, useEffect } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport HomeStyle from \"./HomeStyle\";\r\nimport fetchData from \"../components/API\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  MultiElementCarousel,\r\n  FullWidthCarousel,\r\n} from \"../components/carousel\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nconst useStyles = makeStyles((theme) => HomeStyle(theme, fade));\r\n\r\nexport default function Home(props) {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const { shows } = props;\r\n  // const [shows, setShows] = useState(null);\r\n  // const [searchFieldData, setSearchFieldData] = useState(null);\r\n  // useEffect(() => {\r\n  //   fetchData(\"http://api.tvmaze.com/shows\", pageData);\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  // const pageData = (result) => {\r\n  //   if (result) {\r\n  //     autoCompleteData(result);\r\n  //     result = groupByGener(result);\r\n  //     setShows(sortByRating(result));\r\n  //   }\r\n  // };\r\n  // const groupByGener = (result) => {\r\n  //   // grouping by genres\r\n  //   return result.reduce(function (showList, show) {\r\n  //     show.genres.map((item) => {\r\n  //       showList[item] = showList[item] || [];\r\n  //       showList[item].push(show);\r\n  //     });\r\n  //     return showList;\r\n  //   }, {});\r\n  // };\r\n\r\n  // const sortByRating = (result) => {\r\n  //   //sort each gener by rating and modify data in a required format\r\n  //   const sortedShowsDataSet = [];\r\n  //   for (const [key, value] of Object.entries(result)) {\r\n  //     value.sort(function (previousElement, nextElement) {\r\n  //       return nextElement.rating.average - previousElement.rating.average;\r\n  //     });\r\n  //     sortedShowsDataSet.push({ genre: key, entries: value });\r\n  //   }\r\n  //   return sortedShowsDataSet;\r\n  // };\r\n  // const autoCompleteData = (data) => {\r\n  //   data = data.reduce((showList, show) => {\r\n  //     showList.push({ title: show.name, id: show.id });\r\n  //     return showList;\r\n  //   }, []);\r\n  //   setSearchFieldData(data);\r\n  // };\r\n  const navigateTo = (data) => {\r\n    console.log(history);\r\n    history.push(`/details/${data.id}`);\r\n  };\r\n  return (\r\n    <div className={classes.root} style={{ marginTop: \"10vh\" }}>\r\n      {shows ? (\r\n        <div>\r\n          <FullWidthCarousel\r\n            data-testid=\"fullCarousel\"\r\n            type=\"full\"\r\n            autoPlay={true}\r\n            data={shows}\r\n            navigateTo={navigateTo}\r\n            className={classes.FullWidthCarousel}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className={classes.root}>\r\n          <Skeleton />\r\n          <Skeleton animation={false} />\r\n          <Skeleton animation=\"wave\" />\r\n        </div>\r\n      )}\r\n      {shows\r\n        ? shows.map((show, index) => {\r\n            return (\r\n              <div key={index}>\r\n                <Typography variant=\"subtitle1\">\r\n                  {show.genre} Features\r\n                </Typography>\r\n                <MultiElementCarousel\r\n                  data={show.entries}\r\n                  navigateTo={navigateTo}\r\n                />\r\n              </div>\r\n            );\r\n          })\r\n        : Array.from(new Array(3)).map((item, index) => (\r\n            <Grid key={index} container wrap=\"nowrap\">\r\n              {Array.from(new Array(6)).map((item, innerIndex) => (\r\n                <Box key={innerIndex} width={210} marginRight={0.5} my={5}>\r\n                  <Skeleton variant=\"rect\" width={210} height={118} />\r\n                  <Box pt={0.5}>\r\n                    <Skeleton />\r\n                    <Skeleton width=\"60%\" />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Grid>\r\n          ))}\r\n    </div>\r\n  );\r\n}\r\n","C:\\WorkSpace\\tvmaze\\src\\pages\\NotFound.js",[],"C:\\WorkSpace\\tvmaze\\src\\pages\\HomeStyle.js",[],"C:\\WorkSpace\\tvmaze\\src\\components\\API.js",[],"C:\\WorkSpace\\tvmaze\\src\\components\\carousel.js",["63"],"import Carousel from \"react-multi-carousel\";\r\nimport \"react-multi-carousel/lib/styles.css\";\r\nimport ShowCard from \"./showCard\";\r\n\r\nconst MultiElementCarousel = (props) => {\r\n  const { data, navigateTo } = props;\r\n  return (\r\n    <Carousel\r\n      data-testid=\"multiCarousel\"\r\n      additionalTransfrom={0}\r\n      arrows\r\n      autoPlaySpeed={3000}\r\n      centerMode={false}\r\n      className=\"\"\r\n      containerClass=\"container-with-dots\"\r\n      dotListClass=\"\"\r\n      draggable\r\n      focusOnSelect={false}\r\n      infinite\r\n      itemClass=\"\"\r\n      keyBoardControl\r\n      minimumTouchDrag={80}\r\n      renderButtonGroupOutside={false}\r\n      renderDotsOutside={false}\r\n      responsive={{\r\n        desktop: {\r\n          breakpoint: {\r\n            max: 3000,\r\n            min: 1024,\r\n          },\r\n          items: 6,\r\n          partialVisibilityGutter: 40,\r\n        },\r\n        mobile: {\r\n          breakpoint: {\r\n            max: 464,\r\n            min: 0,\r\n          },\r\n          items: 2,\r\n          partialVisibilityGutter: 30,\r\n        },\r\n        tablet: {\r\n          breakpoint: {\r\n            max: 1024,\r\n            min: 464,\r\n          },\r\n          items: 4,\r\n          partialVisibilityGutter: 30,\r\n        },\r\n      }}\r\n      showDots={false}\r\n      sliderClass=\"\"\r\n      slidesToSlide={1}\r\n      swipeable\r\n    >\r\n      {data.map((show, index) => {\r\n        return (\r\n          <div\r\n            onClick={() => navigateTo(show)}\r\n            key={index}\r\n            data-testid={`show-${show.id}`}\r\n          >\r\n            <img src={show.image.medium} />\r\n          </div>\r\n        );\r\n      })}\r\n    </Carousel>\r\n  );\r\n};\r\n\r\nconst FullWidthCarousel = (props) => {\r\n  const { data, navigateTo } = props;\r\n  return (\r\n    <Carousel\r\n      additionalTransfrom={0}\r\n      arrows\r\n      autoPlaySpeed={3000}\r\n      centerMode={false}\r\n      className=\"\"\r\n      containerClass=\"container\"\r\n      dotListClass=\"\"\r\n      focusOnSelect={false}\r\n      infinite\r\n      itemClass=\"\"\r\n      keyBoardControl\r\n      renderButtonGroupOutside={false}\r\n      renderDotsOutside={false}\r\n      responsive={{\r\n        desktop: {\r\n          breakpoint: {\r\n            max: 3000,\r\n            min: 1024,\r\n          },\r\n          items: 1,\r\n        },\r\n        mobile: {\r\n          breakpoint: {\r\n            max: 464,\r\n            min: 0,\r\n          },\r\n          items: 1,\r\n        },\r\n        tablet: {\r\n          breakpoint: {\r\n            max: 1024,\r\n            min: 464,\r\n          },\r\n          items: 1,\r\n        },\r\n      }}\r\n      showDots\r\n      sliderClass=\"\"\r\n      slidesToSlide={1}\r\n      swipeable\r\n    >\r\n      {data\r\n        // .filter(\r\n        //   (thing, index, self) =>\r\n        //     index === self.findIndex((t) => t.id === thing.id)\r\n        // )\r\n        .map((show, index) => {\r\n          return (\r\n            <div onClick={() => navigateTo(show.entries[0])} key={index}>\r\n              <ShowCard data={show.entries[0]} />\r\n            </div>\r\n          );\r\n        })}\r\n    </Carousel>\r\n  );\r\n};\r\nexport { FullWidthCarousel, MultiElementCarousel };\r\n","C:\\WorkSpace\\tvmaze\\src\\components\\showCard.js",["64","65","66","67","68","69","70"],"C:\\WorkSpace\\tvmaze\\src\\components\\layout.js",["71","72","73","74"],"C:\\WorkSpace\\tvmaze\\src\\pages\\searchList.js",["75","76","77","78"],{"ruleId":"79","severity":1,"message":"80","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":30,"column":30,"nodeType":"85","messageId":"86","endLine":30,"endColumn":32},{"ruleId":"87","severity":1,"message":"88","line":70,"column":6,"nodeType":"89","endLine":70,"endColumn":23,"suggestions":"90"},{"ruleId":"79","severity":1,"message":"91","line":5,"column":35,"nodeType":"81","messageId":"82","endLine":5,"endColumn":41},{"ruleId":"79","severity":1,"message":"92","line":5,"column":43,"nodeType":"81","messageId":"82","endLine":5,"endColumn":48},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":29,"column":15,"nodeType":"99","endLine":29,"endColumn":53},{"ruleId":"97","severity":1,"message":"98","line":56,"column":23,"nodeType":"99","endLine":56,"endColumn":57},{"ruleId":"79","severity":1,"message":"100","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"101","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"102","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":17},{"ruleId":"97","severity":1,"message":"98","line":63,"column":13,"nodeType":"99","endLine":63,"endColumn":44},{"ruleId":"79","severity":1,"message":"103","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":17},{"ruleId":"79","severity":1,"message":"104","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":18},{"ruleId":"79","severity":1,"message":"105","line":8,"column":8,"nodeType":"81","messageId":"82","endLine":8,"endColumn":24},{"ruleId":"79","severity":1,"message":"106","line":9,"column":8,"nodeType":"81","messageId":"82","endLine":9,"endColumn":21},{"ruleId":"79","severity":1,"message":"107","line":10,"column":8,"nodeType":"81","messageId":"82","endLine":10,"endColumn":20},{"ruleId":"79","severity":1,"message":"108","line":11,"column":10,"nodeType":"81","messageId":"82","endLine":11,"endColumn":15},{"ruleId":"79","severity":1,"message":"109","line":43,"column":9,"nodeType":"81","messageId":"82","endLine":43,"endColumn":14},{"ruleId":"79","severity":1,"message":"100","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"101","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"110","line":7,"column":10,"nodeType":"81","messageId":"82","endLine":7,"endColumn":20},{"ruleId":"79","severity":1,"message":"111","line":19,"column":41,"nodeType":"81","messageId":"82","endLine":19,"endColumn":51},{"ruleId":"79","severity":1,"message":"100","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"101","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"102","line":2,"column":8,"nodeType":"81","messageId":"82","endLine":2,"endColumn":17},{"ruleId":"97","severity":1,"message":"98","line":27,"column":23,"nodeType":"99","endLine":31,"endColumn":25},"no-unused-vars","'CodeSharp' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["112"],"'Switch' is defined but never used.","'Route' is defined but never used.","no-native-reassign",["113"],"no-negated-in-lhs",["114"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used.","'fetchData' is defined but never used.","'CardMedia' is defined but never used.","'IconButton' is defined but never used.","'SkipPreviousIcon' is defined but never used.","'PlayArrowIcon' is defined but never used.","'SkipNextIcon' is defined but never used.","'Paper' is defined but never used.","'theme' is assigned a value but never used.","'useHistory' is defined but never used.","'navigateTo' is assigned a value but never used.",{"desc":"115","fix":"116"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [history, querySearchList]",{"range":"117","text":"118"},[2292,2309],"[history, querySearchList]"]