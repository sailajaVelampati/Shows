[{"C:\\WorkSpace\\tvmaze\\src\\App.js":"1","C:\\WorkSpace\\tvmaze\\src\\index.js":"2","C:\\WorkSpace\\tvmaze\\src\\reportWebVitals.js":"3","C:\\WorkSpace\\tvmaze\\src\\pages\\Details.js":"4","C:\\WorkSpace\\tvmaze\\src\\pages\\Home.js":"5","C:\\WorkSpace\\tvmaze\\src\\pages\\NotFound.js":"6","C:\\WorkSpace\\tvmaze\\src\\components\\carousel\\index.js":"7","C:\\WorkSpace\\tvmaze\\src\\pages\\HomeStyle.js":"8","C:\\WorkSpace\\tvmaze\\src\\pages\\dump.js":"9","C:\\WorkSpace\\tvmaze\\src\\components\\API.js":"10","C:\\WorkSpace\\tvmaze\\src\\components\\API.mock.js":"11","C:\\WorkSpace\\tvmaze\\src\\components\\hearder.js":"12"},{"size":700,"mtime":1608876062463,"results":"13","hashOfConfig":"14"},{"size":500,"mtime":1608809454107,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1608537689303,"results":"16","hashOfConfig":"14"},{"size":3173,"mtime":1608880893817,"results":"17","hashOfConfig":"14"},{"size":4663,"mtime":1608880775057,"results":"18","hashOfConfig":"14"},{"size":267,"mtime":1608745211870,"results":"19","hashOfConfig":"14"},{"size":3458,"mtime":1608881228183,"results":"20","hashOfConfig":"14"},{"size":1653,"mtime":1608871723147,"results":"21","hashOfConfig":"14"},{"size":5090,"mtime":1608570394633,"results":"22","hashOfConfig":"23"},{"size":276,"mtime":1608809430901,"results":"24","hashOfConfig":"14"},{"size":28087,"mtime":1608803956565,"results":"25","hashOfConfig":"14"},{"size":1303,"mtime":1608889033079,"results":"26","hashOfConfig":"14"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1fhpoqz",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rfyfyk",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\WorkSpace\\tvmaze\\src\\App.js",[],["55","56"],"C:\\WorkSpace\\tvmaze\\src\\index.js",[],"C:\\WorkSpace\\tvmaze\\src\\reportWebVitals.js",[],"C:\\WorkSpace\\tvmaze\\src\\pages\\Details.js",["57","58"],"import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport fetchData from \"../components/API\";\r\nimport { Paper, Grid } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport HomeStyle from \"./HomeStyle\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nconst useStyles = makeStyles((theme) => HomeStyle(theme, fade));\r\nconst Details = () => {\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n  const [showDetails, setShowdetails] = useState(null);\r\n  useEffect(() => {\r\n    fetchData(`http://api.tvmaze.com/shows/${id}?embed=episodes`, (result) => {\r\n      setShowdetails(result);\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {showDetails ? (\r\n        <div>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={4}>\r\n              <img src={showDetails.image.medium} />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              <Typography variant=\"h6\" noWrap>\r\n                {showDetails.name}\r\n              </Typography>\r\n              <div\r\n                dangerouslySetInnerHTML={{\r\n                  __html: `${showDetails.summary}`,\r\n                }}\r\n              />\r\n              <Typography variant=\"body2\">\r\n                Genres: {showDetails.genres.join(\",\")}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Rating: {showDetails.rating.average}\r\n              </Typography>\r\n            </Grid>\r\n            {}\r\n          </Grid>\r\n\r\n          {showDetails._embedded.episodes.map((episode, index) => {\r\n            return (\r\n              <div key={index}>\r\n                <Paper className={classes.root}>\r\n                  <Grid container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                      <img src={episode.image.medium} />\r\n                    </Grid>\r\n                    <Grid item xs={7}>\r\n                      <p></p>\r\n                      <Typography variant=\"h6\">{episode.name}</Typography>\r\n                      <Typography variant=\"caption\" display=\"block\">\r\n                        {`Season: ${episode.season} Episode: ${episode.number}`}\r\n                      </Typography>\r\n                      <div\r\n                        dangerouslySetInnerHTML={{\r\n                          __html: `${episode.summary}`,\r\n                        }}\r\n                      />\r\n                      <Typography variant=\"caption\" display=\"block\">\r\n                        Runtime: {episode.runtime}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Paper>\r\n                <Divider />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <Skeleton variant=\"text\" />\r\n          <Skeleton variant=\"circle\" width={40} height={40} />\r\n          <Skeleton variant=\"rect\" height={550} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Details;\r\n","C:\\WorkSpace\\tvmaze\\src\\pages\\Home.js",["59"],"import React, { useState, useEffect } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport HomeStyle from \"./HomeStyle\";\r\nimport fetchData from \"../components/API\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {\r\n  MultiElementCarousel,\r\n  FullWidthCarousel,\r\n} from \"../components/carousel\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nconst useStyles = makeStyles((theme) => HomeStyle(theme, fade));\r\n\r\nexport default function Home() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [shows, setShows] = useState(null);\r\n  const [searchFieldData, setSearchFieldData] = useState(null);\r\n  useEffect(() => {\r\n    fetchData(\"http://api.tvmaze.com/shows\", pageData);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const pageData = (result) => {\r\n    if (result) {\r\n      autoCompleteData(result);\r\n      result = groupByGener(result);\r\n      setShows(sortByRating(result));\r\n    }\r\n  };\r\n  const groupByGener = (result) => {\r\n    // grouping by genres\r\n    return result.reduce(function (showList, show) {\r\n      show.genres.map((item) => {\r\n        showList[item] = showList[item] || [];\r\n        showList[item].push(show);\r\n      });\r\n      return showList;\r\n    }, {});\r\n  };\r\n\r\n  const sortByRating = (result) => {\r\n    //sort each gener by rating and modify data in a required format\r\n    const sortedShowsDataSet = [];\r\n    for (const [key, value] of Object.entries(result)) {\r\n      value.sort(function (previousElement, nextElement) {\r\n        return nextElement.rating.average - previousElement.rating.average;\r\n      });\r\n      sortedShowsDataSet.push({ genre: key, entries: value });\r\n    }\r\n    return sortedShowsDataSet;\r\n  };\r\n  const autoCompleteData = (data) => {\r\n    data = data.reduce((showList, show) => {\r\n      showList.push({ title: show.name, id: show.id });\r\n      return showList;\r\n    }, []);\r\n    setSearchFieldData(data);\r\n  };\r\n  const navigateTo = (data) => {\r\n    history.push(`/details/${data.id}`);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.SearchBar}>\r\n        <Toolbar>\r\n          <Autocomplete\r\n            style={{ color: \"#F8F9F9\" }}\r\n            fullWidth={true}\r\n            disableClearable\r\n            options={searchFieldData || []}\r\n            getOptionLabel={(option) => option.title}\r\n            onChange={(event, selectedValue) => {\r\n              navigateTo(selectedValue);\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                style={{ color: \"#F8F9F9\" }}\r\n                {...params}\r\n                label=\"Search by Shows name\"\r\n                InputProps={{ ...params.InputProps, type: \"search\" }}\r\n              />\r\n            )}\r\n          />\r\n        </Toolbar>\r\n      </AppBar>\r\n      {shows ? (\r\n        <div>\r\n          <FullWidthCarousel\r\n            data-testid=\"fullCarousel\"\r\n            type=\"full\"\r\n            autoPlay={true}\r\n            data={shows}\r\n            navigateTo={navigateTo}\r\n            className={classes.FullWidthCarousel}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div className={classes.root}>\r\n          <Skeleton />\r\n          <Skeleton animation={false} />\r\n          <Skeleton animation=\"wave\" />\r\n        </div>\r\n      )}\r\n      {shows\r\n        ? shows.map((show, index) => {\r\n            return (\r\n              <div key={index}>\r\n                <Typography variant=\"subtitle1\">\r\n                  {show.genre} Features\r\n                </Typography>\r\n                <MultiElementCarousel\r\n                  data={show.entries}\r\n                  navigateTo={navigateTo}\r\n                />\r\n              </div>\r\n            );\r\n          })\r\n        : Array.from(new Array(3)).map((item, index) => (\r\n            <Grid key={index} container wrap=\"nowrap\">\r\n              {Array.from(new Array(6)).map((item, innerIndex) => (\r\n                <Box key={innerIndex} width={210} marginRight={0.5} my={5}>\r\n                  <Skeleton variant=\"rect\" width={210} height={118} />\r\n                  <Box pt={0.5}>\r\n                    <Skeleton />\r\n                    <Skeleton width=\"60%\" />\r\n                  </Box>\r\n                </Box>\r\n              ))}\r\n            </Grid>\r\n          ))}\r\n    </div>\r\n  );\r\n}\r\n","C:\\WorkSpace\\tvmaze\\src\\pages\\NotFound.js",[],"C:\\WorkSpace\\tvmaze\\src\\components\\carousel\\index.js",["60","61"],"C:\\WorkSpace\\tvmaze\\src\\pages\\HomeStyle.js",[],"C:\\WorkSpace\\tvmaze\\src\\pages\\dump.js",[],"C:\\WorkSpace\\tvmaze\\src\\components\\API.js",[],"C:\\WorkSpace\\tvmaze\\src\\components\\API.mock.js",[],["62","63"],"C:\\WorkSpace\\tvmaze\\src\\components\\hearder.js",["64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":29,"column":15,"nodeType":"72","endLine":29,"endColumn":53},{"ruleId":"70","severity":1,"message":"71","line":56,"column":23,"nodeType":"72","endLine":56,"endColumn":57},{"ruleId":"73","severity":1,"message":"74","line":40,"column":30,"nodeType":"75","messageId":"76","endLine":40,"endColumn":32},{"ruleId":"70","severity":1,"message":"71","line":62,"column":13,"nodeType":"72","endLine":65,"endColumn":15},{"ruleId":"70","severity":1,"message":"71","line":132,"column":15,"nodeType":"72","endLine":139,"endColumn":17},{"ruleId":"66","replacedBy":"77"},{"ruleId":"68","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"83","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["84"],["85"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]